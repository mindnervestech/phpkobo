'''
Created on Oct 31, 2014

@author: esmail
'''

from __future__ import absolute_import
import unittest
import os

from selenium import webdriver

from .selenium_ide_exported import empty_test
from .selenium_ide_exported import export_xls_test
from .selenium_ide_exported import delete_form_test
from .selenium_ide_exported import deploy_form_test
from .selenium_ide_exported import enter_data_test
from .selenium_ide_exported import download_entered_data_test
from .selenium_ide_exported import delete_project_test
from .selenium_ide_exported import logout_test
from .edited_test_cases import initial_login_test_edited
from .edited_test_cases import create_form_test_edited
from .edited_test_cases import preview_form_test_edited
from .edited_test_cases import upload_xls_test_edited


# Inherit some helper functions automatically generated by Selenium IDE.
class Test_Selenium(empty_test.EmptyTest):
    
    # Don't use the inherited, automatically-generated setup and teardown methods.
    def setUp(self):
        pass
 
    def tearDown(self):
        pass


    @classmethod
    def setUpClass(cls):        
        # Set up the Firefox instance to automatically download XLS files.
        # Copied from http://stackoverflow.com/a/18440478/1877326.
        # To prevent download dialog
        profile = webdriver.FirefoxProfile()
        profile.set_preference('browser.download.folderList', 2) # custom location
        profile.set_preference('browser.download.manager.showWhenStarting', False)
        profile.set_preference('browser.download.dir', '/tmp')
        profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/vnd.ms-excel')
                
        cls.driver = webdriver.Firefox(profile)
        cls.driver.implicitly_wait(30)
        cls.driver.maximize_window()
        cls.verificationErrors = []
        cls.accept_next_alert = True
        
    @classmethod
    def tearDownClass(cls):
        # Clean up the downloaded XLS file if the test got that far.
        if os.path.isfile('/tmp/Selenium_test_form_title.xls'):
            os.remove('/tmp/Selenium_test_form_title.xls')
        cls.driver.quit()
#         self.assertEqual([], self.verificationErrors)
        
    # TODO: Delete "selenium" user and associated data from DB after testing.


    # Record the base URLs to use for KoBoForm and KoBoCAT
    KOBOFORM_URL= os.environ.get('KOBOFORM_URL', 'http://kf.kbtdev.org/')
    KOBOCAT_URL= os.environ.get('KOBOCAT_URL', 'http://kc.kbtdev.org/')

#     # SCIENCE!!! Want to automatically generate test methods, but it seems like it will require 'metaclass' magic... http://stackoverflow.com/a/13579703/1877326
#     # Tuples of the step number, base URL for the step, Selenium 'TestCase' subclass, and test method.  
#     test_tuples = [
#         (2,
#          KOBOFORM_URL,
#          initial_login_test_edited.InitialLoginTestTemplate, 
#          initial_login_test_edited.InitialLoginTestTemplate.test_initial_login_test_template
#         ),
#         
#         (3,
#          KOBOFORM_URL,
#          create_form_test_edited.CreateFormTestTemplate,
#          create_form_test_edited.CreateFormTestTemplate.test_create_form_test_template
#         ),
#         
#          # TODO: Address 'iframe' issues and re-activate this test.
# #         ('step_04',
# #          KOBOFORM_URL,
# #          preview_form_test_edited.PreviewFormTestTemplate,
# #          preview_form_test_edited.PreviewFormTestTemplate.test_preview_form_test_template
# #         ),
#         
#         (5,
#          KOBOFORM_URL,
#          export_xls_test.ExportXlsTest,
#          export_xls_test.ExportXlsTest.test_export_xls
#         ),
#         
#         # TODO: Test that the file was indeed (newly) exported and can be read by 'pyxform'.
#         
#         (6,
#          KOBOFORM_URL,
#          delete_form_test.DeleteFormTest,
#          delete_form_test.DeleteFormTest.test_delete_form
#         ),
#         
#         (7,
#          KOBOFORM_URL,
#          upload_xls_test_edited.UploadXlsTestTemplate,
#          upload_xls_test_edited.UploadXlsTestTemplate.test_upload_xls_test_template
#         ),
#         
#         (8,
#          KOBOFORM_URL,
#          deploy_form_test.DeployFormTest,
#          deploy_form_test.DeployFormTest.test_deploy_form
#         ),
#         
#         (9,
#          KOBOCAT_URL,
#          enter_data_test.EnterDataTest,
#          enter_data_test.EnterDataTest.test_enter_data
#         ),
#         
#         (10,
#          KOBOCAT_URL,
#          download_entered_data_test.DownloadEnteredDataTest,
#          download_entered_data_test.DownloadEnteredDataTest.test_download_entered_data
#         ),
#         
#         (11,
#          KOBOCAT_URL,
#          delete_project_test.DeleteProjectTest,
#          delete_project_test.DeleteProjectTest.test_delete_project
#         ),
#         
#         # Step 12 implemented manually below.
#         
#         (13,
#          KOBOCAT_URL,
#          logout_test.LogoutTest,
#          logout_test.LogoutTest.test_logout
#         ),
#     ]
        

    # TODO: Intercept the generated registration e-mail to a file and test the supplied link.
#     def test_step_01_register_user(self):
#         # KoBoForm test.
#         self.base_url= KOBOFORM_URL
#         register_user_test.RegisterUserTest.test_register_user(self)
#         raise NotImplementedError


    def test_step_02_initial_login(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL
        
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= initial_login_test_edited.InitialLoginTestTemplate
        test_method_name= test_case_class.test_initial_login_test_template.__name__
        test_case_class.__dict__[test_method_name](self)


    def test_step_03_create_form(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL
 
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= create_form_test_edited.CreateFormTestTemplate
        test_method_name= test_case_class.test_create_form_test_template.__name__
        test_case_class.__dict__[test_method_name](self)
        
    # TODO: Address 'iframe' issues and re-activate this test.
    def test_step_04_preview_form_kf(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL
  
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= preview_form_test_edited.PreviewFormTestTemplate
        test_method_name= test_case_class.test_preview_form_test_template.__name__
        #test_case_class.__dict__[test_method_name](self)
 
 
    def test_step_05_export_xls(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL
 
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= export_xls_test.ExportXlsTest
        test_method_name= test_case_class.test_export_xls.__name__
        test_case_class.__dict__[test_method_name](self)
         
        # TODO: Test that the file was indeed (newly) exported and can be read by 'pyxform'.
 
 
    def test_step_06_delete_form(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL
 
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= delete_form_test.DeleteFormTest
        test_method_name= test_case_class.test_delete_form.__name__
        test_case_class.__dict__[test_method_name](self)
 
 
    def test_step_07_upload_xls(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL
 
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= upload_xls_test_edited.UploadXlsTestTemplate
        test_method_name= test_case_class.test_upload_xls_test_template.__name__
        test_case_class.__dict__[test_method_name](self)
 
 
    def test_step_08_deploy_form(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL
 
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= deploy_form_test.DeployFormTest
        test_method_name= test_case_class.test_deploy_form.__name__
        test_case_class.__dict__[test_method_name](self)
 
 
    def test_step_09_enter_data(self):
        # KoBoCAT test.
        self.base_url= self.KOBOCAT_URL
 
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= enter_data_test.EnterDataTest
        test_method_name= test_case_class.test_enter_data.__name__
        test_case_class.__dict__[test_method_name](self)
 
 
    def test_step_10_download_entered_data(self):
        # KoBoCAT test.
        self.base_url= self.KOBOCAT_URL
 
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= download_entered_data_test.DownloadEnteredDataTest
        test_method_name= test_case_class.test_download_entered_data.__name__
        test_case_class.__dict__[test_method_name](self)
 
 
    def test_step_11_delete_project_test(self):
        # KoBoCAT test.
        self.base_url= self.KOBOCAT_URL
 
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= delete_project_test.DeleteProjectTest
        test_method_name= test_case_class.test_delete_project.__name__
        test_case_class.__dict__[test_method_name](self)
 
 
    def test_step_12_delete_form_test(self):
        self.test_step_06_delete_form()
 
 
    def test_step_13_logout(self):
        # KoBoCAT test.
        self.base_url= self.KOBOCAT_URL
 
        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= logout_test.LogoutTest
        test_method_name= test_case_class.test_logout.__name__
        test_case_class.__dict__[test_method_name](self)


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
//https://github.com/jbsaff/angular-schema-form-multiselect
angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/multiselect/multiselect.html",'<div class="form-group {{form.htmlClass}} schema-form-multiselect" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><select ng-model="$$value$$" ng-model-options="form.ngModelOptions" multiple="multiple" sf-multiple="form.multiple" ng-disabled="form.readonly" sf-changed="form" class="form-control {{form.fieldHtmlClass}}" schema-validate="form" ng-options="item.value as item.name group by item.group for item in form.titleMap" ng-required="form.required" name="{{form.key.slice(-1)[0]}}" multiselect-config="{{form.multiselectConfig}}"></select><div class="help-block" sf-message="form.description"></div></div>'),e.put("directives/decorators/bootstrap/multiselect/selectWithDefault.html",'<div class="form-group {{form.htmlClass}} schema-form-select" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><select ng-model="$$value$$" ng-model-options="form.ngModelOptions" ng-disabled="form.readonly" sf-changed="form" class="form-control {{form.fieldHtmlClass}}" schema-validate="form" ng-options="item.value as item.name group by item.group for item in form.titleMap" ng-required="form.required" name="{{form.key.slice(-1)[0]}}"><option value="" disabled="" selected="" hidden="">{{form.selectDefault || \'Select ...\'}}</option></select><div class="help-block" sf-message="form.description"></div></div>')}]),angular.module("schemaForm").directive("sfMultiple",["$http",function(e){var t={maxHeight:305,enableCaseInsensitiveFiltering:!0,inheritClass:!1,nSelectedText:"selected.",templates:{li:'<li class="multiSelectCheckbox"><a href="javascript:void(0);"><label></label></a></li>'}},r={};return{restrict:"A",require:["ngModel"],scope:{ngModel:"="},link:function(e,o,l){return o.multiselect?(l.multiselectConfig?angular.extend(r,t,JSON.parse(l.multiselectConfig)):r=t,void e.$watch(l.ngIf,function(){console.log("init multiselect"),o.multiselect(r)})):void console.warn("bootstrap-multiselect not present.")}}}]),angular.module("schemaForm").directive("schemaValidate",["sfUnselect",function(e){return{priority:600,link:function(t,r,o){var l;if(t.options&&t.options.formDefaults){var s=t.options.formDefaults.destroyStrategy,i=void 0===s||""===s||null===s||"retain"===s;i?l=s:(console.warn("Unrecognized formDefaults.destroyStrategy: '%s'. Used undefined instead.",s),l=void 0)}t.$on("$destroy",function(){function r(r){var o=null===r||""===r||void 0==typeof r;o||(r=l),e(t.form.key,t.model,r)}function s(){n=i.schema?i.schema.type:null}var i=t.$eval(o.schemaValidate),a=i.destroyStrategy,n=s();a&&"retain"!==a?(console.warn("Unrecognized destroyStrategy: '%s'. Used default instead.",a),a=l):"string"!==n&&""===a&&(console.warn("Attempted to use empty string destroyStrategy on non-string form type. Used default instead."),a=l),"retain"!==a&&r(a)})}}}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,r){var o=function(e,t,o){if("string"===t.type&&"multiple"===t.multiple&&t.items&&t.items["enum"]){var l=stdFormObj(e,t,o);return l.key=o.path,l.type="multiselect",l.titleMap||(l.titleMap=enumToTitleMap(t.items["enum"])),o.lookup[r.stringify(o.path)]=l,l}};e.defaults.string.unshift(o),t.addMapping("bootstrapDecorator","multiselect","directives/decorators/bootstrap/multiselect/multiselect.html"),t.createDirective("multiselect","directives/decorators/bootstrap/multiselect/multiselect.html")}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,r){var o=function(e,t,o){if("string"===t.type&&t["enum"]){var l=stdFormObj(e,t,o);return l.key=o.path,l.type="selectWithDefault",l.titleMap||(l.titleMap=enumToTitleMap(t["enum"])),o.lookup[r.stringify(o.path)]=l,l}};e.defaults.string.unshift(o),t.addMapping("bootstrapDecorator","selectWithDefault","directives/decorators/bootstrap/multiselect/selectWithDefault.html"),t.createDirective("selectWithDefault","directives/decorators/bootstrap/multiselect/selectWithDefault.html")}]),angular.module("schemaForm").factory("sfUnselect",["sfPath",function(e){var t=/^\d+$/;return function(r,o,l){o||(o=this);var s="string"==typeof r?e.parse(r):r;if(1===s.length)return o[s[0]]=l,o;if("undefined"==typeof o[s[0]]){var i=t.test(s[1]);if(i)return void 0;s.length>2&&(o[s[0]]={})}for(var a=o[s[0]],n=1;n<s.length;n++){if(""===s[n])return void 0;var c=a[s[n]];if(n===s.length-1)return a[s[n]]=l,l;if("undefined"==typeof c||null===c)return void 0;a=c}return a}}]);
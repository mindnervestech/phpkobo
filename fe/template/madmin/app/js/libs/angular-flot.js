// Generated by CoffeeScript 1.8.0
angular.module('angular-flot', [])
.constant('defaultOptions', {
	 spline :{
		 series: {
	            lines: {
	                show: !1
	            },
	            splines: {
	                show: !0,
	                tension: 0.4,
	                lineWidth: 2,
	                fill: 0.8
	            },
	            points: {
	                show: !0,
	                radius: 4
	            }
	        },
	        grid: {
	            borderColor: "#fafafa",
	            borderWidth: 1,
	            hoverable: !0
	        },
	        tooltip: !0,
	        tooltipOpts: {
	            content: "%x : %y",
	            defaultTheme: false
	        },
	        xaxis: {
	            tickColor: "#fafafa",
	            mode: "categories"
	        },
	        yaxis: {
	            tickColor: "#fafafa"
	        },
	        shadowSize: 0
	 },
	 stack : {
	      series: {
	          shadowSize: 0,
	          stack: true, // stack bars
	          bars: {
		          show: true,
		          fill: true,
		          lineWidth: 0,
		          fillColor: {
		            colors: [{ opacity:0.6 }, { opacity:0.8}]
		          },
		          colors: ['#428bca','#d9534f','#A40778']
		        },
	        },
	        bars: {
	        	align: 'center',
	            barWidth: .4
	        },
	        
	        xaxis: {
	          mode : 'categories',
	          font: {
	            color: '#ccc'
	          }
	        },
	        yaxis: {
	          font: {
	            color: '#ccc'
	          }
	        },
	        grid: {
	          hoverable: true,
	          clickable: true,
	          borderWidth: 0,
	          color: '#ccc'
	        },
	        tooltip: true
	     },
	 
	  
	})
.directive('flot',['defaultOptions','$http', function(defaultOptions,$http) {
  return {
    restrict: 'EA',
    template: '<div></div>',
    scope: {
      dataset: '=dataset',
      options: '=options',
      callback: '=',
      type:'@',
      remote: '='
    },
    link: function(scope, element, attributes) {
      var height, init, onDatasetChanged, onOptionsChanged, plot, plotArea, width, _ref, _ref1;
      plot = null;
      width = attributes.width || '100%';
      height = attributes.height || '100%';
      if (((_ref = scope.options) != null ? (_ref1 = _ref.legend) != null ? _ref1.container : void 0 : void 0) instanceof jQuery) {
        throw 'Please use a jQuery expression string with the "legend.container" option.';
      }
      if (!scope.dataset) {
        scope.dataset = [];
      }
      if (!scope.options && !scope.type) {
        scope.options = {
          legend: {
            show: false
          }
        };
      }
      
      
      plotArea = $(element.children()[0]);
      plotArea.css({
        width: width,
        height: height
      });
      init = function() {
        var plotObj;
        if (!scope.options && scope.type) {
        	plotObj = $.plot(plotArea, scope.dataset, defaultOptions[scope.type]);
        } else {
        	plotObj = $.plot(plotArea, scope.dataset, scope.options);
        }
        if (scope.callback) {
          scope.callback(plotObj);
        }
        return plotObj;
      };
      onDatasetChanged = function(dataset) {
        if (plot) {
          plot.setData(dataset);
          plot.setupGrid();
          return plot.draw();
        } else {
          return plot = init();
        }
      };
      scope.$watch('dataset', onDatasetChanged, true);
      onOptionsChanged = function() {
        return plot = init();
      };
      
      if(scope.remote /*&& scope.remote.refreshTime && scope.remote.refreshTime > 0*/) {
      	scope.$watch('remote', function( remote ) {
      	//$interval(function() {
      		$http({url:scope.remote.url, params:scope.remote.data,  method: "GET"})
      	
          	.success(function(data, status, headers, config){
          		scope.options = data.option;
          		scope.dataset = data.dataset;
          	})
          	.error(function(data, status, headers, config) {
          		//TODO
          	});
      	  //},$scope.remote.refreshTime);
      	});
      }
      
      return scope.$watch('options', onOptionsChanged, true);
    }
  };
}]);
